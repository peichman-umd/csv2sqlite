#!/usr/bin/env python

from __future__ import print_function

import csv
import sqlite3
import sys
import argparse
import re

parser = argparse.ArgumentParser()
parser.add_argument('-f', dest="FORCE", action="store_true")
parser.add_argument('-v', dest="VERBOSE", action="store_true")
parser.add_argument('DB_FILE')
args = parser.parse_args()

dbh = sqlite3.connect(args.DB_FILE)

in_reader = csv.reader(sys.stdin)

headers = in_reader.next()
if args.VERBOSE:
    print(headers, file=sys.stderr)

# sanitize headers for legal SQL column names
nonwords = re.compile('[^a-zA-Z0-9_]')
columns = [ nonwords.sub('_', h) for h in headers ]

# preserve original header names and positions
if args.FORCE:
    dbh.execute('drop table if exists headers')
dbh.execute('create table headers (position text, header text, column text)')
dbh.executemany(
    'insert into headers (position, header, column) values (?,?,?)',
    zip(
        list(xrange(1,len(headers) + 1)),
        headers,
        columns,
    ),
)

sql_create = 'create table data (' + ','.join([c + ' text' for c in columns]) + ')'
if args.VERBOSE:
    print(sql_create, file=sys.stderr)
if args.FORCE:
    dbh.execute('drop table if exists data')
dbh.execute(sql_create)

placeholders = ['?'] * len(columns)
sql_insert = 'insert into data (' + ','.join(columns) + ') values (' + ','.join(placeholders) + ')'
if args.VERBOSE:
    print(sql_insert, file=sys.stderr)

for row in in_reader:
    if args.VERBOSE:
        print(row, file=sys.stderr)
    dbh.execute(sql_insert, tuple(row))

dbh.commit()
