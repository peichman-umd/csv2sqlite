#!/usr/bin/env python

from __future__ import print_function

import csv
import sqlite3
import sys
import argparse

# source: http://stackoverflow.com/a/6701665/5124907
import codecs

def quote_identifier(s, errors="strict"):
    encodable = s.encode("utf-8", errors).decode("utf-8")

    nul_index = encodable.find("\x00")

    if nul_index >= 0:
        error = UnicodeEncodeError("NUL-terminated utf-8", encodable,
                                   nul_index, nul_index + 1, "NUL not allowed")
        error_handler = codecs.lookup_error(errors)
        replacement, _ = error_handler(error)
        encodable = encodable.replace("\x00", replacement)

    return "\"" + encodable.replace("\"", "\"\"") + "\""

parser = argparse.ArgumentParser()
parser.add_argument('-f', dest="FORCE", action="store_true")
parser.add_argument('-v', dest="VERBOSE", action="store_true")
parser.add_argument('DB_FILE')
args = parser.parse_args()

dbh = sqlite3.connect(args.DB_FILE)

in_reader = csv.reader(sys.stdin)

headers = in_reader.next()
if args.VERBOSE:
    print(headers, file=sys.stderr)

# transform header strings to legal SQL identifiers
# for use as column names
columns = [ quote_identifier(h) for h in headers ]

# preserve original header names and positions
if args.FORCE:
    dbh.execute('drop table if exists headers')
dbh.execute('create table headers (position text, header text, column text)')
dbh.executemany(
    'insert into headers (position, header, column) values (?,?,?)',
    zip(
        list(xrange(1,len(headers) + 1)),
        headers,
        columns,
    ),
)

sql_create = 'create table data (' + ','.join([c + ' text' for c in columns]) + ')'
if args.VERBOSE:
    print(sql_create, file=sys.stderr)
if args.FORCE:
    dbh.execute('drop table if exists data')
dbh.execute(sql_create)

placeholders = ['?'] * len(columns)
sql_insert = 'insert into data (' + ','.join(columns) + ') values (' + ','.join(placeholders) + ')'
if args.VERBOSE:
    print(sql_insert, file=sys.stderr)

for row in in_reader:
    if args.VERBOSE:
        print(row, file=sys.stderr)
    dbh.execute(sql_insert, tuple(row))

dbh.commit()
